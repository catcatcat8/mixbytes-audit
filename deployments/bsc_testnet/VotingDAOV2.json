{
  "address": "0x11e500F2281E23bBd737957778A7826DAf049207",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "ProposalQuorumReached",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ACTIVE_PROPOSALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControl",
      "outputs": [
        {
          "internalType": "contract AccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        }
      ],
      "name": "countYeas",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        }
      ],
      "name": "find",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMiniMeToken",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract VetoNFT",
          "name": "vetoes_",
          "type": "address"
        },
        {
          "internalType": "contract AccessControl",
          "name": "accessControl_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalExisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "createdTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "createdBlockNumber",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sendETH",
              "type": "bool"
            }
          ],
          "internalType": "struct Payment",
          "name": "payment",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "updatedBlockNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "yeas",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "nays",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vetoed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        }
      ],
      "name": "veto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vetoes",
      "outputs": [
        {
          "internalType": "contract VetoNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voted",
      "outputs": [
        {
          "internalType": "enum VotingDAOV2.VoteType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingToken",
      "outputs": [
        {
          "internalType": "contract IMiniMeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x21b6cf109d97fe113ec3c07343c1e2b831c7aa7a213fba4c3cd57c5383e62c13",
  "receipt": {
    "to": null,
    "from": "0x6EF1032E74B0371BAa3cA64878d8984eFd1B7453",
    "contractAddress": "0x11e500F2281E23bBd737957778A7826DAf049207",
    "transactionIndex": 13,
    "gasUsed": "1916057",
    "logsBloom": "0x
    "blockHash": "0xc72ac9fbf64a9561b695d0b427110c9908f15cc4da58f8a882d801d37c4b2e83",
    "transactionHash": "0x21b6cf109d97fe113ec3c07343c1e2b831c7aa7a213fba4c3cd57c5383e62c13",
    "logs": [],
    "blockNumber": 22678691,
    "cumulativeGasUsed": "8958662",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f0051e101a42643440f23acfd8fc3ff0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"ProposalQuorumReached\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ACTIVE_PROPOSALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"contract AccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"countYeas\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"find\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMiniMeToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract VetoNFT\",\"name\":\"vetoes_\",\"type\":\"address\"},{\"internalType\":\"contract AccessControl\",\"name\":\"accessControl_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalExisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"createdTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"createdBlockNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendETH\",\"type\":\"bool\"}],\"internalType\":\"struct Payment\",\"name\":\"payment\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"updatedBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"yeas\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nays\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vetoed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"veto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vetoes\",\"outputs\":[{\"internalType\":\"contract VetoNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"enum VotingDAOV2.VoteType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingToken\",\"outputs\":[{\"internalType\":\"contract IMiniMeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createProposal(uint256)\":{\"params\":{\"hash\":\"proposal hash\"}},\"initialize(address,address,address)\":{\"params\":{\"token\":\"address of MiniMeToken\"}},\"veto(uint256)\":{\"params\":{\"hash\":\"proposal hash\"}},\"vote(uint256,bool)\":{\"params\":{\"hash\":\"The hash of the proposal\",\"support\":\"Yea or nay\"}},\"withdrawETH(uint256,address,uint256)\":{\"params\":{\"amount\":\"ETH amount\",\"hash\":\"proposal hash\",\"to\":\"where to send ETH\"}},\"withdrawToken(uint256,address,address,uint256)\":{\"params\":{\"amount\":\"how much token to send\",\"hash\":\"proposal hash\",\"to\":\"where to send token\",\"token\":\"ERC20-token contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createProposal(uint256)\":{\"notice\":\"Create a proposal without payment\"},\"execute(uint256)\":{\"notice\":\"Execute a proposal so it could be removed from the queue If the proposal's payment amount > 0 then a withdrawment from the treasury is made If there are not enough funds in the treasury then the transaction is reverted\"},\"find(uint256)\":{\"notice\":\"Find index of a proposal by hash that could be in any state: active, expired or finished\"},\"veto(uint256)\":{\"notice\":\"Veto the vote A user needs a Veto Token to run this method\"},\"vote(uint256,bool)\":{\"notice\":\"Cast a vote\"},\"withdrawETH(uint256,address,uint256)\":{\"notice\":\"Create a proposal to withdraw ETH\"},\"withdrawToken(uint256,address,address,uint256)\":{\"notice\":\"Create a proposal to withdraw a ERC20-token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingDAOV2.sol\":\"VotingDAOV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./AccessControlledRoles.sol\\\";\\n\\ncontract AccessControlled is AccessControlledRoles {\\n    AccessControl public accessControl;\\n\\n    modifier role(bytes32 role_) {\\n        require(address(accessControl) != address(0), \\\"NO_ACL\\\");\\n        require(accessControl.hasRole(role_, msg.sender), \\\"ACCESS_DENIED\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xf713e091fe4fc00c2dc3f73272ea3d9366b1c530d63ae8ab16a16a03a15ba0e4\",\"license\":\"MIT\"},\"contracts/AccessControlledRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessControlledRoles {\\n    bytes32 constant ADMIN = 0x00;\\n    bytes32 constant VETO_MINT = keccak256(\\\"VETO_MINT\\\");\\n}\",\"keccak256\":\"0x8212e42d7fd01fcaae823bdbfe88f9ecd70f1a28b57e4e15d63d27ae10dfca57\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    uint32 constant FIXED_SUPPLY = 100e6; // totalSupply\\n    uint8 constant DECIMALS = 6;\\n\\n    // Proposal becomes completed (\\u201caccepted\\u201d or \\u201cdeclined\\u201d) if > 50%\\n    // of votes for the same decision (\\u201cfor\\u201d or \\u201cagainst\\u201d) is gathered\\n    uint32 constant MIN_QUORUM = FIXED_SUPPLY / 2 + 1;\\n}\\n\",\"keccak256\":\"0x18ae7280c09bd008eef94c5d9c15f9afc17e0456e94125e6425b8bf9d23c2b80\",\"license\":\"MIT\"},\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    string constant ERROR_CANNOT_EXECUTE_REJECTED_PROPOSAL = \\\"ERROR_CANNOT_EXECUTE_REJECTED_PROPOSAL\\\";\\n    string constant ERROR_INSUFFICIENT_BALANCE = \\\"ERROR_INSUFFICIENT_BALANCE\\\";\\n    string constant ERROR_NOT_FOUND = \\\"ERROR_NOT_FOUND\\\";\\n    string constant ERROR_COLLISION = \\\"ERROR_COLLISION\\\";\\n    string constant ERROR_EXPIRED = \\\"ERROR_EXPIRED\\\";\\n    string constant ERROR_ALREADY_EXECUTED = \\\"ERROR_ALREADY_EXECUTED\\\";\\n    string constant ERROR_QUORUM_IS_NOT_REACHED = \\\"ERROR_QUORUM_IS_NOT_REACHED\\\";\\n    string constant ERROR_TREASURY_INSUFFICIENT_BALANCE = \\\"ERROR_TREASURY_INSUFFICIENT_BALANCE\\\";\\n    string constant ERROR_ZERO_ADDRESS = \\\"ERROR_ZERO_ADDRESS\\\";\\n    string constant ERROR_QUEUE_IS_FULL = \\\"ERROR_QUEUE_IS_FULL\\\";\\n    string constant UINT32_NUMBER_TOO_BIG = \\\"UINT32_NUMBER_TOO_BIG\\\";\\n    string constant ERROR_VETOED = \\\"ERROR_VETOED\\\";\\n    string constant NO_VETO_RIGHT = \\\"NO_VETO_RIGHT\\\";\\n}\",\"keccak256\":\"0xd04e7795abc6656577afc083a0c2641590edf08976644aa4a72d464a806ee96f\",\"license\":\"MIT\"},\"contracts/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/Uint256Helpers.sol\\\";\\nimport \\\"contracts/Constants.sol\\\";\\n\\nstruct Payment {\\n    address token;\\n    address destination;\\n    uint256 amount;\\n    bool sendETH;\\n}\\n\\nstruct Proposal {\\n    uint256 hash;\\n    uint32 createdTimestamp; // until 2105 year\\n    uint32 createdBlockNumber;\\n    Payment payment;\\n    // init zeros:\\n    uint32 updatedBlockNumber;\\n    uint32 yeas;\\n    uint32 nays;\\n    bool isExecuted;\\n    bool vetoed;\\n}\\n\\nlibrary ProposalLibrary {\\n    using Uint256Helpers for uint256;\\n\\n    // time-to-live(TTL) of proposal is 3 days\\n    // after that time proposal becomes \\u201cdiscarded\\u201d if not enough votes are gathered\\n    uint32 constant PROPOSAL_TTL = 3 days;\\n\\n    function emptyPayment() internal pure returns (Payment memory) {\\n        return Payment({token: address(0), destination: address(0), amount: 0, sendETH: false});\\n    }\\n\\n    function isExpired(Proposal storage proposal) internal view returns (bool) {\\n        return proposal.createdTimestamp + PROPOSAL_TTL < block.timestamp;\\n    }\\n\\n    function isQuorumReached(Proposal storage proposal) internal view returns (bool) {\\n        return isAccepted(proposal) || isRejected(proposal);\\n    }\\n\\n    function isRejected(Proposal storage proposal) internal view returns (bool) {\\n        return proposal.nays >= Constants.MIN_QUORUM;\\n    }\\n\\n    function isAccepted(Proposal storage proposal) internal view returns (bool) {\\n        return proposal.yeas >= Constants.MIN_QUORUM;\\n    }\\n\\n    function isActive(Proposal storage proposal) internal view returns (bool) {\\n        return proposal.createdBlockNumber > 0 && !isRejected(proposal) && !proposal.isExecuted;\\n    }\\n\\n    function vote(\\n        Proposal storage proposal,\\n        bool support,\\n        uint32 votingPower\\n    ) internal {\\n        if (support) {\\n            proposal.yeas += votingPower;\\n        } else {\\n            proposal.nays += votingPower;\\n        }\\n        proposal.updatedBlockNumber = block.number.toUint32();\\n    }\\n\\n    function isSupported(Proposal storage proposal) internal view returns (bool) {\\n        return proposal.yeas > proposal.nays;\\n    }\\n}\\n\",\"keccak256\":\"0x22add5d9adff48e50568af0e4f5a2b299f7359951ea5d82807eebded64195569\",\"license\":\"MIT\"},\"contracts/ProposalQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/Uint256Helpers.sol\\\";\\nimport \\\"contracts/Errors.sol\\\";\\nimport \\\"contracts/Proposal.sol\\\";\\n\\ncontract ProposalQueue {\\n    using Uint256Helpers for uint256;\\n    using ProposalLibrary for Proposal;\\n\\n    // There are no more than N=3 current proposals, new proposals cannot be added until\\n    // old ones will be \\u201caccepted\\u201d, \\u201cdeclined\\u201d or \\u201cdiscarded\\u201d by TTL\\n    uint8 public constant MAX_ACTIVE_PROPOSALS = 10;\\n\\n    Proposal[MAX_ACTIVE_PROPOSALS] public proposals;\\n\\n    function countYeas(uint256 hash) external view returns (uint32) {\\n        (bool found, uint8 index) = find(hash);\\n\\n        if (!found) return 0;\\n\\n        return proposals[index].yeas;\\n    }\\n\\n    /**\\n    Find index of a proposal by hash that could be in any state: active, expired or finished\\n     */\\n    function find(uint256 hash) public view returns (bool, uint8) {\\n        for (uint8 i; i < MAX_ACTIVE_PROPOSALS; i++) {\\n            if (proposals[i].hash == hash) {\\n                return (true, i);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function findInactive() internal view returns (bool, uint8) {\\n        for (uint8 i = 0; i < MAX_ACTIVE_PROPOSALS; i++) {\\n            if (!proposals[i].isActive()) {\\n                return (true, i);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n    Append a new proposal to the queue or replace an existing inactive proposal by the new one\\n     */\\n    function enqueue(Proposal memory proposal) internal {\\n        (bool found, uint8 index) = findInactive();\\n        require(found, Errors.ERROR_QUEUE_IS_FULL);\\n        \\n        proposals[index] = proposal;\\n    }\\n}\\n\",\"keccak256\":\"0xc9fd493e226ce338247d78ee2e0179a7dd856509f2df10d6e42c58814cf2eb83\",\"license\":\"MIT\"},\"contracts/Uint256Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT32 = uint64(2 ** 32 - 1);\\n\\n    function toUint32(uint256 a) internal pure returns (uint32) {\\n        require(a <= MAX_UINT32, Errors.UINT32_NUMBER_TOO_BIG);\\n        return uint32(a);\\n    }\\n}\",\"keccak256\":\"0x41b2042d4a21683e872a52a6e3bd2cb8233641688927b23ee4067b8358250a69\",\"license\":\"MIT\"},\"contracts/VAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./AccessControlledRoles.sol\\\";\\n\\ncontract VAccessControl is AccessControl, AccessControlledRoles {\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(VETO_MINT, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x876a58cb8535cfe77c39ad4614474f53ef7385adbd46921e6b1eb0118707b1b0\",\"license\":\"MIT\"},\"contracts/VetoNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./AccessControlled.sol\\\";\\n\\ncontract VetoNFT is ERC721, AccessControlled {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n\\n    constructor(AccessControl acl) ERC721(\\\"VetoToken\\\", \\\"VETO\\\") {\\n        accessControl = acl;\\n    }\\n\\n    function mint(address user) role(VETO_MINT) external returns (uint256) {\\n        _tokenIds.increment();\\n\\n        uint256 newItemId = _tokenIds.current();\\n        _mint(user, newItemId);\\n\\n        return newItemId;\\n    }\\n}\\n\",\"keccak256\":\"0x0527373716834a9ba093a799fae4536e56b07fdfe249c7b415d32b142b94175d\",\"license\":\"MIT\"},\"contracts/VotingDAOV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/Uint256Helpers.sol\\\";\\nimport \\\"contracts/Proposal.sol\\\";\\nimport \\\"contracts/Constants.sol\\\";\\nimport \\\"contracts/ProposalQueue.sol\\\";\\nimport \\\"contracts/Errors.sol\\\";\\nimport \\\"interfaces/IMiniMeToken.sol\\\";\\n\\nimport \\\"./VetoNFT.sol\\\";\\nimport \\\"./AccessControlled.sol\\\";\\nimport \\\"./VAccessControl.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract VotingDAOV2 is AccessControlled, Initializable, ProposalQueue {\\n    using Uint256Helpers for uint256;\\n    using ProposalLibrary for Proposal;\\n\\n    event ProposalCreated(uint256 indexed hash);\\n    event ProposalQuorumReached(uint256 indexed hash, bool support);\\n    event ProposalExecuted(uint256 indexed hash);\\n\\n    enum VoteType {\\n        NONE,\\n        YEA,\\n        NAY\\n    }\\n\\n    IMiniMeToken public votingToken;\\n    VetoNFT public vetoes;\\n\\n    mapping(address => mapping(uint256 => VoteType)) public voted;\\n    mapping(uint256 => bool) public proposalExisted;\\n\\n    /**\\n    @param token   address of MiniMeToken\\n     */\\n    function initialize(IMiniMeToken token, VetoNFT vetoes_, AccessControl accessControl_) external initializer {\\n        require(address(accessControl_) != address(0), \\\"AccessControl address cannot be zero\\\");\\n        require(address(token) != address(0), \\\"MiniMeToken address cannot be zero\\\");\\n        require(address(vetoes_) != address(0), \\\"VetoToken address cannot be zero\\\");\\n        require(token.totalSupply() == Constants.FIXED_SUPPLY, \\\"Unexpected total supply\\\");\\n        require(token.balanceOf(msg.sender) == Constants.FIXED_SUPPLY, \\\"Unexpected owner balance\\\");\\n        require(token.decimals() == Constants.DECIMALS, \\\"Unexpected number of decimals\\\");\\n        votingToken = token;\\n        vetoes = vetoes_;\\n        accessControl = accessControl_;\\n    }\\n\\n    // allow to send ETH\\n    receive() external payable {}\\n\\n    /**\\n    Create a proposal without payment\\n\\n    @param hash proposal hash\\n     */\\n    function createProposal(uint256 hash) external {\\n        _createProposal(hash, ProposalLibrary.emptyPayment());\\n    }\\n\\n    /**\\n    Create a proposal to withdraw ETH\\n\\n    @param hash     proposal hash\\n    @param to       where to send ETH\\n    @param amount   ETH amount\\n     */\\n    function withdrawETH(\\n        uint256 hash,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        _createProposal(hash, Payment({token: address(0), destination: to, amount: amount, sendETH: true}));\\n    }\\n\\n    /**\\n    Create a proposal to withdraw a ERC20-token\\n\\n    @param hash     proposal hash\\n    @param token    ERC20-token contract address\\n    @param to       where to send token\\n    @param amount   how much token to send\\n     */\\n    function withdrawToken(\\n        uint256 hash,\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        _createProposal(hash, Payment({token: token, destination: to, amount: amount, sendETH: false}));\\n    }\\n\\n    /**\\n    Veto the vote\\n\\n    A user needs a Veto Token to run this method\\n\\n    @param hash proposal hash\\n     */\\n    function veto(uint256 hash) external {\\n        (bool found, uint8 index) = find(hash);\\n        require(found, Errors.ERROR_NOT_FOUND);\\n\\n        Proposal storage proposal = proposals[index];\\n        require(!proposal.vetoed, Errors.ERROR_VETOED);\\n        require(!proposal.isExpired(), Errors.ERROR_EXPIRED);\\n        require(!proposal.isExecuted, Errors.ERROR_ALREADY_EXECUTED);\\n\\n        require(vetoes.balanceOf(msg.sender) > 0, Errors.NO_VETO_RIGHT);\\n        proposal.vetoed = true;\\n    }\\n\\n    /**\\n    Cast a vote\\n    \\n    @param hash     The hash of the proposal\\n    @param support  Yea or nay\\n    \\n     */\\n    function vote(uint256 hash, bool support) external {\\n        (bool found, uint8 index) = find(hash);\\n        require(found, Errors.ERROR_NOT_FOUND);\\n\\n        Proposal storage proposal = proposals[index];\\n        require(!proposal.vetoed, Errors.ERROR_VETOED);\\n        require(!proposal.isExpired(), Errors.ERROR_EXPIRED);\\n        require(!proposal.isExecuted, Errors.ERROR_ALREADY_EXECUTED);\\n\\n        uint32 votingPower = votingToken.balanceOfAt(msg.sender, proposal.createdBlockNumber).toUint32();\\n        require(votingPower > 0, Errors.ERROR_INSUFFICIENT_BALANCE);\\n\\n        if (voted[msg.sender][hash] == VoteType.YEA) {\\n            proposal.yeas -= votingPower;\\n        }\\n\\n        if (voted[msg.sender][hash] == VoteType.NAY) {\\n            proposal.nays -= votingPower;\\n        }\\n\\n        proposal.vote(support, votingPower);\\n        voted[msg.sender][hash] = support ? VoteType.YEA : VoteType.NAY;\\n\\n        if (proposal.isQuorumReached()) {\\n            emit ProposalQuorumReached(proposal.hash, proposal.isSupported());\\n        }\\n    }\\n\\n    /**\\n    Execute a proposal so it could be removed from the queue\\n\\n    If the proposal's payment amount > 0 then a withdrawment from the treasury is made\\n    If there are not enough funds in the treasury then the transaction is reverted\\n\\n     */\\n    function execute(uint256 hash) external {\\n        (bool found, uint8 index) = find(hash);\\n        require(found, Errors.ERROR_NOT_FOUND);\\n\\n        Proposal storage proposal = proposals[index];\\n        require(!proposal.vetoed, Errors.ERROR_VETOED);\\n        require(!proposal.isExpired(), Errors.ERROR_EXPIRED);\\n        require(!proposal.isExecuted, Errors.ERROR_ALREADY_EXECUTED);\\n        require(proposal.isQuorumReached(), Errors.ERROR_QUORUM_IS_NOT_REACHED);\\n        require(proposal.isAccepted(), Errors.ERROR_CANNOT_EXECUTE_REJECTED_PROPOSAL);\\n\\n        if (proposal.payment.amount > 0 && proposal.isAccepted()) {\\n            _withdraw(proposal.payment);\\n        }\\n\\n        proposal.isExecuted = true;\\n\\n        emit ProposalExecuted(hash);\\n    }\\n\\n    /**\\n    Create and enqueue a proposal\\n\\n    Set payment.amount to zero to create a proposal without payment\\n\\n    Note that you can create a proposal to withdraw funds \\n    even if there are not enough funds in the treasury\\n    in the moment of the proposal's creation\\n     \\n    @param hash Hash of the proposal\\n    @param payment Withdrawment from the treasury:\\n    - token           Treasury token to withdraw. Can be zero if amount is 0 or sendETH is true\\n    - destination     Address to withdraw funds to. Can be zero if amount == 0\\n    - amount          Amount to withdraw. Can be zero if there is no need for payment\\n    - sendETH         Use ETH to withdraw from treasury\\n     */\\n    function _createProposal(uint256 hash, Payment memory payment) internal {\\n        require(!proposalExisted[hash], Errors.ERROR_COLLISION);\\n        proposalExisted[hash] = true;\\n\\n        require(votingToken.balanceOf(msg.sender) > 0, Errors.ERROR_INSUFFICIENT_BALANCE);\\n\\n        if (payment.amount > 0) {\\n            require(payment.destination != address(0), Errors.ERROR_ZERO_ADDRESS);\\n            if (!payment.sendETH) {\\n                require(payment.token != address(0), Errors.ERROR_ZERO_ADDRESS);\\n            }\\n        }\\n\\n        super.enqueue(\\n            Proposal({\\n                hash: hash,\\n                createdTimestamp: block.timestamp.toUint32(),\\n                createdBlockNumber: block.number.toUint32(),\\n                payment: payment,\\n                updatedBlockNumber: 0,\\n                yeas: 0,\\n                nays: 0,\\n                isExecuted: false,\\n                vetoed: false\\n            })\\n        );\\n\\n        emit ProposalCreated(hash);\\n    }\\n\\n    function _withdraw(Payment storage payment) internal {\\n        if (payment.sendETH) {\\n            _withdrawETH(payment.destination, payment.amount);\\n        } else {\\n            _withdrawToken(IERC20(payment.token), payment.destination, payment.amount);\\n        }\\n    }\\n\\n    function _withdrawETH(address destination, uint256 amount) internal {\\n        // mistype check\\n        require(destination != address(0), Errors.ERROR_ZERO_ADDRESS);\\n\\n        // ensure there are enough funds\\n        // leave that requirement for testing purposes\\n        // to unify revert's error messages\\n        require(address(this).balance >= amount, Errors.ERROR_TREASURY_INSUFFICIENT_BALANCE);\\n\\n        // send eth\\n        destination.call{value: amount}(\\\"\\\");\\n    }\\n\\n    function _withdrawToken(\\n        IERC20 token,\\n        address destination,\\n        uint256 amount\\n    ) internal {\\n        // mistype check\\n        require(address(destination) != address(0), Errors.ERROR_ZERO_ADDRESS);\\n\\n        // if there are not enough funds on the token\\n        // safeTransfer is still may not revert\\n        require(token.balanceOf(address(this)) >= amount, Errors.ERROR_TREASURY_INSUFFICIENT_BALANCE);\\n\\n        // send token\\n        token.transfer(destination, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xafb301e06b37a7a300a1b269b9706c4a0ef8eadb85fd168a922afe2537fce2c9\",\"license\":\"MIT\"},\"interfaces/IMiniMeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMiniMeToken {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function balanceOfAt(address owner, uint256 blockNumber) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8925911c1d954f49e322a412144f0b517b9bc5f1dd3129ff2fb3af3ff2fc9d32\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121b4806100206000396000f3fe6080604052600436106100f75760003560e01c8063a91937ad1161008a578063c9d27afe11610059578063c9d27afe14610370578063d8756f6a14610390578063f1ceef34146103c5578063fe0d94c11461040557600080fd5b8063a91937ad146102c1578063b0340123146102e8578063c0c53b8b14610308578063c591aa981461032857600080fd5b80633e530e5b116100c65780633e530e5b146102285780635a43dc001461026157806396cd918714610281578063a066ff42146102a157600080fd5b8063013cf08b1461010357806313007d55146101ae5780631d28dec7146101e65780631d5936221461020857600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e366004611ee7565b610425565b60408051998a5263ffffffff9889166020808c01919091529789168a82015286516001600160a01b039081166060808d0191909152988801511660808b015286015160a08a01529590940151151560c088015291851660e087015284166101008601529092166101208401529015156101408301521515610160820152610180015b60405180910390f35b3480156101ba57600080fd5b506000546101ce906001600160a01b031681565b6040516001600160a01b0390911681526020016101a5565b3480156101f257600080fd5b50610206610201366004611ee7565b6104cd565b005b34801561021457600080fd5b50610206610223366004611f5e565b610737565b34801561023457600080fd5b50610248610243366004611ee7565b610771565b60408051921515835260ff9091166020830152016101a5565b34801561026d57600080fd5b5061020661027c366004611ee7565b6107dc565b34801561028d57600080fd5b5061020661029c366004611f17565b610830565b3480156102ad57600080fd5b506048546101ce906001600160a01b031681565b3480156102cd57600080fd5b506102d6600a81565b60405160ff90911681526020016101a5565b3480156102f457600080fd5b506047546101ce906001600160a01b031681565b34801561031457600080fd5b50610206610323366004611e9d565b610875565b34801561033457600080fd5b50610363610343366004611e4f565b604960209081526000928352604080842090915290825290205460ff1681565b6040516101a59190611fe5565b34801561037c57600080fd5b5061020661038b366004611f95565b610d4a565b34801561039c57600080fd5b506103b06103ab366004611ee7565b6111b1565b60405163ffffffff90911681526020016101a5565b3480156103d157600080fd5b506103f56103e0366004611ee7565b604a6020526000908152604090205460ff1681565b60405190151581526020016101a5565b34801561041157600080fd5b50610206610420366004611ee7565b611217565b600181600a811061043557600080fd5b60070201805460018201546040805160808101825260028501546001600160a01b0390811682526003860154166020820152600485015491810191909152600584015460ff9081161515606083015260069094015492945063ffffffff8083169464010000000093849004821694929383831693908104831692600160401b82041691600160601b8204811691600160681b90041689565b6000806104d983610771565b91509150816040518060400160405280600f81526020016e11549493d497d393d517d193d55391608a1b8152509061052d5760405162461bcd60e51b8152600401610524919061200d565b60405180910390fd5b50600060018260ff16600a811061055457634e487b7160e01b600052603260045260246000fd5b60070201905080600601600d9054906101000a900460ff16156040518060400160405280600c81526020016b11549493d497d5915513d15160a21b815250906105b05760405162461bcd60e51b8152600401610524919061200d565b506105ba816114aa565b156040518060400160405280600d81526020016c11549493d497d1561412549151609a1b815250906105ff5760405162461bcd60e51b8152600401610524919061200d565b50600681015460408051808201909152601681527511549493d497d053149150511657d1561150d555115160521b602082015290600160601b900460ff161561065b5760405162461bcd60e51b8152600401610524919061200d565b506048546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190611eff565b116040518060400160405280600d81526020016c1393d7d5915513d7d49251d215609a1b8152509061071d5760405162461bcd60e51b8152600401610524919061200d565b50600601805460ff60681b1916600160681b179055505050565b60408051608081018252600081526001600160a01b03841660208201529081018290526001606082015261076c9084906114d5565b505050565b60008060005b600a60ff821610156107d0578360018260ff16600a81106107a857634e487b7160e01b600052603260045260246000fd5b600702015414156107be57600194909350915050565b806107c8816120dc565b915050610777565b50600093849350915050565b61082d8161082860408051608080820183526000808352602080840182905283850182905260609384018290528451928301855281835282018190529281018390529081019190915290565b6114d5565b50565b61086f846040518060800160405280866001600160a01b03168152602001856001600160a01b03168152602001848152602001600015158152506114d5565b50505050565b600054600160a81b900460ff161580801561089d57506000546001600160a01b90910460ff16105b806108be5750303b1580156108be5750600054600160a01b900460ff166001145b6109215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610524565b6000805460ff60a01b1916600160a01b179055801561094e576000805460ff60a81b1916600160a81b1790555b6001600160a01b0382166109b05760405162461bcd60e51b8152602060048201526024808201527f416363657373436f6e74726f6c20616464726573732063616e6e6f74206265206044820152637a65726f60e01b6064820152608401610524565b6001600160a01b038416610a115760405162461bcd60e51b815260206004820152602260248201527f4d696e694d65546f6b656e20616464726573732063616e6e6f74206265207a65604482015261726f60f01b6064820152608401610524565b6001600160a01b038316610a675760405162461bcd60e51b815260206004820181905260248201527f5665746f546f6b656e20616464726573732063616e6e6f74206265207a65726f6044820152606401610524565b6305f5e10063ffffffff16846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610aab57600080fd5b505afa158015610abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae39190611eff565b14610b305760405162461bcd60e51b815260206004820152601760248201527f556e657870656374656420746f74616c20737570706c790000000000000000006044820152606401610524565b6040516370a0823160e01b81523360048201526305f5e100906001600160a01b038616906370a082319060240160206040518083038186803b158015610b7557600080fd5b505afa158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190611eff565b14610bfa5760405162461bcd60e51b815260206004820152601860248201527f556e6578706563746564206f776e65722062616c616e636500000000000000006044820152606401610524565b600660ff16846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3857600080fd5b505afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c709190611fc4565b60ff1614610cc05760405162461bcd60e51b815260206004820152601d60248201527f556e6578706563746564206e756d626572206f6620646563696d616c730000006044820152606401610524565b604780546001600160a01b038087166001600160a01b031992831617909255604880548684169083161790556000805492851692909116919091179055801561086f576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b600080610d5684610771565b91509150816040518060400160405280600f81526020016e11549493d497d393d517d193d55391608a1b81525090610da15760405162461bcd60e51b8152600401610524919061200d565b50600060018260ff16600a8110610dc857634e487b7160e01b600052603260045260246000fd5b60070201905080600601600d9054906101000a900460ff16156040518060400160405280600c81526020016b11549493d497d5915513d15160a21b81525090610e245760405162461bcd60e51b8152600401610524919061200d565b50610e2e816114aa565b156040518060400160405280600d81526020016c11549493d497d1561412549151609a1b81525090610e735760405162461bcd60e51b8152600401610524919061200d565b50600681015460408051808201909152601681527511549493d497d053149150511657d1561150d555115160521b602082015290600160601b900460ff1615610ecf5760405162461bcd60e51b8152600401610524919061200d565b50604754600182015460405163277166bf60e11b815233600482015264010000000090910463ffffffff166024820152600091610f70916001600160a01b0390911690634ee2cd7e9060440160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190611eff565b61177f565b905060008163ffffffff16116040518060400160405280601a81526020017f4552524f525f494e53554646494349454e545f42414c414e434500000000000081525090610fd05760405162461bcd60e51b8152600401610524919061200d565b5060013360009081526049602090815260408083208a845290915290205460ff16600281111561101057634e487b7160e01b600052602160045260246000fd5b141561105857808260060160048282829054906101000a900463ffffffff1661103991906120b7565b92506101000a81548163ffffffff021916908363ffffffff1602179055505b60023360009081526049602090815260408083208a845290915290205460ff16600281111561109757634e487b7160e01b600052602160045260246000fd5b14156110df57808260060160088282829054906101000a900463ffffffff166110c091906120b7565b92506101000a81548163ffffffff021916908363ffffffff1602179055505b6110ea8286836117da565b846110f65760026110f9565b60015b3360009081526049602090815260408083208a84529091529020805460ff1916600183600281111561113b57634e487b7160e01b600052602160045260246000fd5b021790555061114982611893565b156111a95781547f7f49fee12481e1a69afde062c724e5af30c2fea2dcc0184b173e4f1342f75508611195846006015463ffffffff600160401b82048116640100000000909204161190565b604051901515815260200160405180910390a25b505050505050565b60008060006111bf84610771565b91509150816111d2575060009392505050565b60018160ff16600a81106111f657634e487b7160e01b600052603260045260246000fd5b6007020160060160049054906101000a900463ffffffff1692505050919050565b60008061122383610771565b91509150816040518060400160405280600f81526020016e11549493d497d393d517d193d55391608a1b8152509061126e5760405162461bcd60e51b8152600401610524919061200d565b50600060018260ff16600a811061129557634e487b7160e01b600052603260045260246000fd5b60070201905080600601600d9054906101000a900460ff16156040518060400160405280600c81526020016b11549493d497d5915513d15160a21b815250906112f15760405162461bcd60e51b8152600401610524919061200d565b506112fb816114aa565b156040518060400160405280600d81526020016c11549493d497d1561412549151609a1b815250906113405760405162461bcd60e51b8152600401610524919061200d565b50600681015460408051808201909152601681527511549493d497d053149150511657d1561150d555115160521b602082015290600160601b900460ff161561139c5760405162461bcd60e51b8152600401610524919061200d565b506113a681611893565b6040518060400160405280601b81526020017f4552524f525f51554f52554d5f49535f4e4f545f524541434845440000000000815250906113fa5760405162461bcd60e51b8152600401610524919061200d565b50611404816118b3565b604051806060016040528060268152602001612159602691399061143b5760405162461bcd60e51b8152600401610524919061200d565b506004810154158015906114535750611453816118b3565b1561146457611464816002016118f9565b60068101805460ff60601b1916600160601b17905560405184907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a250505050565b600181015460009042906114c8906203f4809063ffffffff16612060565b63ffffffff161092915050565b6000828152604a6020908152604091829020548251808401909352600f83526e22a92927a92fa1a7a62624a9a4a7a760891b9183019190915260ff161561152f5760405162461bcd60e51b8152600401610524919061200d565b506000828152604a6020526040808220805460ff1916600117905560475490516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561158c57600080fd5b505afa1580156115a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c49190611eff565b116040518060400160405280601a81526020017f4552524f525f494e53554646494349454e545f42414c414e4345000000000000815250906116195760405162461bcd60e51b8152600401610524919061200d565b506040810151156116e65760006001600160a01b031681602001516001600160a01b03161415604051806040016040528060128152602001714552524f525f5a45524f5f4144445245535360701b815250906116885760405162461bcd60e51b8152600401610524919061200d565b5080606001516116e65780516040805180820190915260128152714552524f525f5a45524f5f4144445245535360701b6020820152906001600160a01b03166116e45760405162461bcd60e51b8152600401610524919061200d565b505b6117506040518061012001604052808481526020016117044261177f565b63ffffffff1681526020016117184361177f565b63ffffffff16815260208101849052600060408201819052606082018190526080820181905260a0820181905260c090910152611946565b60405182907fc2c021f5d73c63c481d336fbbafec58f694fc45095f00b02d2deb8cca59afe0790600090a25050565b60408051808201909152601581527455494e5433325f4e554d4245525f544f4f5f42494760581b602082015260009063ffffffff8311156117d35760405162461bcd60e51b8152600401610524919061200d565b5090919050565b811561182657808360060160048282829054906101000a900463ffffffff166118039190612060565b92506101000a81548163ffffffff021916908363ffffffff160217905550611868565b808360060160088282829054906101000a900463ffffffff166118499190612060565b92506101000a81548163ffffffff021916908363ffffffff1602179055505b6118714361177f565b600693909301805463ffffffff191663ffffffff909416939093179092555050565b600061189e826118b3565b806118ad57506118ad82611af0565b92915050565b60006118c460026305f5e100612088565b6118cf906001612060565b63ffffffff168260060160049054906101000a900463ffffffff1663ffffffff1610159050919050565b600381015460ff1615611923576001810154600282015461082d916001600160a01b031690611b36565b80546001820154600283015461082d926001600160a01b03908116921690611c18565b600080611951611d9e565b91509150816040518060400160405280601381526020017211549493d497d45551555157d254d7d1955313606a1b815250906119a05760405162461bcd60e51b8152600401610524919061200d565b508260018260ff16600a81106119c657634e487b7160e01b600052603260045260246000fd5b82516007919091029190910190815560208083015160018301805460408087015163ffffffff94851667ffffffffffffffff199384161764010000000091861682021790935560608088015180516002890180546001600160a01b03199081166001600160a01b03938416179091559782015160038a018054909916911617909655908501516004870155939093015160058501805460ff191691151591909117905560808501516006909401805460a087015160c088015160e0890151610100909901519786169290961691909117908416909202919091176cffffffffff00000000000000001916600160401b939092169290920260ff60601b191617600160601b931515939093029290921760ff60681b1916600160681b91151591909102179055505050565b6000611b0160026305f5e100612088565b611b0c906001612060565b63ffffffff168260060160089054906101000a900463ffffffff1663ffffffff1610159050919050565b6040805180820190915260128152714552524f525f5a45524f5f4144445245535360701b60208201526001600160a01b038316611b865760405162461bcd60e51b8152600401610524919061200d565b50804710156040518060600160405280602381526020016121366023913990611bc25760405162461bcd60e51b8152600401610524919061200d565b506040516001600160a01b038316908290600081818185875af1925050503d8060008114611c0c576040519150601f19603f3d011682016040523d82523d6000602084013e611c11565b606091505b5050505050565b6040805180820190915260128152714552524f525f5a45524f5f4144445245535360701b60208201526001600160a01b038316611c685760405162461bcd60e51b8152600401610524919061200d565b506040516370a0823160e01b815230600482015281906001600160a01b038516906370a082319060240160206040518083038186803b158015611caa57600080fd5b505afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190611eff565b10156040518060600160405280602381526020016121366023913990611d1b5760405162461bcd60e51b8152600401610524919061200d565b5060405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015611d6657600080fd5b505af1158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086f9190611e7a565b60008060005b600a60ff82161015611e0057611de060018260ff16600a8110611dd757634e487b7160e01b600052603260045260246000fd5b60070201611e0b565b611dee576001939092509050565b80611df8816120dc565b915050611da4565b506000928392509050565b6001810154600090640100000000900463ffffffff1615801590611e355750611e3382611af0565b155b80156118ad57505060060154600160601b900460ff161590565b60008060408385031215611e61578182fd5b8235611e6c81612112565b946020939093013593505050565b600060208284031215611e8b578081fd5b8151611e9681612127565b9392505050565b600080600060608486031215611eb1578081fd5b8335611ebc81612112565b92506020840135611ecc81612112565b91506040840135611edc81612112565b809150509250925092565b600060208284031215611ef8578081fd5b5035919050565b600060208284031215611f10578081fd5b5051919050565b60008060008060808587031215611f2c578081fd5b843593506020850135611f3e81612112565b92506040850135611f4e81612112565b9396929550929360600135925050565b600080600060608486031215611f72578283fd5b833592506020840135611f8481612112565b929592945050506040919091013590565b60008060408385031215611fa7578182fd5b823591506020830135611fb981612127565b809150509250929050565b600060208284031215611fd5578081fd5b815160ff81168114611e96578182fd5b602081016003831061200757634e487b7160e01b600052602160045260246000fd5b91905290565b6000602080835283518082850152825b818110156120395785810183015185820160400152820161201d565b8181111561204a5783604083870101525b50601f01601f1916929092016040019392505050565b600063ffffffff80831681851680830382111561207f5761207f6120fc565b01949350505050565b600063ffffffff808416806120ab57634e487b7160e01b83526012600452602483fd5b92169190910492915050565b600063ffffffff838116908316818110156120d4576120d46120fc565b039392505050565b600060ff821660ff8114156120f3576120f36120fc565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461082d57600080fd5b801515811461082d57600080fdfe4552524f525f54524541535552595f494e53554646494349454e545f42414c414e43454552524f525f43414e4e4f545f455845435554455f52454a45435445445f50524f504f53414ca2646970667358221220e2c3a3f5dd4667d1987b97e11696765d854af8323b6a2c319385ec9488e75bc064736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c8063a91937ad1161008a578063c9d27afe11610059578063c9d27afe14610370578063d8756f6a14610390578063f1ceef34146103c5578063fe0d94c11461040557600080fd5b8063a91937ad146102c1578063b0340123146102e8578063c0c53b8b14610308578063c591aa981461032857600080fd5b80633e530e5b116100c65780633e530e5b146102285780635a43dc001461026157806396cd918714610281578063a066ff42146102a157600080fd5b8063013cf08b1461010357806313007d55146101ae5780631d28dec7146101e65780631d5936221461020857600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e366004611ee7565b610425565b60408051998a5263ffffffff9889166020808c01919091529789168a82015286516001600160a01b039081166060808d0191909152988801511660808b015286015160a08a01529590940151151560c088015291851660e087015284166101008601529092166101208401529015156101408301521515610160820152610180015b60405180910390f35b3480156101ba57600080fd5b506000546101ce906001600160a01b031681565b6040516001600160a01b0390911681526020016101a5565b3480156101f257600080fd5b50610206610201366004611ee7565b6104cd565b005b34801561021457600080fd5b50610206610223366004611f5e565b610737565b34801561023457600080fd5b50610248610243366004611ee7565b610771565b60408051921515835260ff9091166020830152016101a5565b34801561026d57600080fd5b5061020661027c366004611ee7565b6107dc565b34801561028d57600080fd5b5061020661029c366004611f17565b610830565b3480156102ad57600080fd5b506048546101ce906001600160a01b031681565b3480156102cd57600080fd5b506102d6600a81565b60405160ff90911681526020016101a5565b3480156102f457600080fd5b506047546101ce906001600160a01b031681565b34801561031457600080fd5b50610206610323366004611e9d565b610875565b34801561033457600080fd5b50610363610343366004611e4f565b604960209081526000928352604080842090915290825290205460ff1681565b6040516101a59190611fe5565b34801561037c57600080fd5b5061020661038b366004611f95565b610d4a565b34801561039c57600080fd5b506103b06103ab366004611ee7565b6111b1565b60405163ffffffff90911681526020016101a5565b3480156103d157600080fd5b506103f56103e0366004611ee7565b604a6020526000908152604090205460ff1681565b60405190151581526020016101a5565b34801561041157600080fd5b50610206610420366004611ee7565b611217565b600181600a811061043557600080fd5b60070201805460018201546040805160808101825260028501546001600160a01b0390811682526003860154166020820152600485015491810191909152600584015460ff9081161515606083015260069094015492945063ffffffff8083169464010000000093849004821694929383831693908104831692600160401b82041691600160601b8204811691600160681b90041689565b6000806104d983610771565b91509150816040518060400160405280600f81526020016e11549493d497d393d517d193d55391608a1b8152509061052d5760405162461bcd60e51b8152600401610524919061200d565b60405180910390fd5b50600060018260ff16600a811061055457634e487b7160e01b600052603260045260246000fd5b60070201905080600601600d9054906101000a900460ff16156040518060400160405280600c81526020016b11549493d497d5915513d15160a21b815250906105b05760405162461bcd60e51b8152600401610524919061200d565b506105ba816114aa565b156040518060400160405280600d81526020016c11549493d497d1561412549151609a1b815250906105ff5760405162461bcd60e51b8152600401610524919061200d565b50600681015460408051808201909152601681527511549493d497d053149150511657d1561150d555115160521b602082015290600160601b900460ff161561065b5760405162461bcd60e51b8152600401610524919061200d565b506048546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190611eff565b116040518060400160405280600d81526020016c1393d7d5915513d7d49251d215609a1b8152509061071d5760405162461bcd60e51b8152600401610524919061200d565b50600601805460ff60681b1916600160681b179055505050565b60408051608081018252600081526001600160a01b03841660208201529081018290526001606082015261076c9084906114d5565b505050565b60008060005b600a60ff821610156107d0578360018260ff16600a81106107a857634e487b7160e01b600052603260045260246000fd5b600702015414156107be57600194909350915050565b806107c8816120dc565b915050610777565b50600093849350915050565b61082d8161082860408051608080820183526000808352602080840182905283850182905260609384018290528451928301855281835282018190529281018390529081019190915290565b6114d5565b50565b61086f846040518060800160405280866001600160a01b03168152602001856001600160a01b03168152602001848152602001600015158152506114d5565b50505050565b600054600160a81b900460ff161580801561089d57506000546001600160a01b90910460ff16105b806108be5750303b1580156108be5750600054600160a01b900460ff166001145b6109215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610524565b6000805460ff60a01b1916600160a01b179055801561094e576000805460ff60a81b1916600160a81b1790555b6001600160a01b0382166109b05760405162461bcd60e51b8152602060048201526024808201527f416363657373436f6e74726f6c20616464726573732063616e6e6f74206265206044820152637a65726f60e01b6064820152608401610524565b6001600160a01b038416610a115760405162461bcd60e51b815260206004820152602260248201527f4d696e694d65546f6b656e20616464726573732063616e6e6f74206265207a65604482015261726f60f01b6064820152608401610524565b6001600160a01b038316610a675760405162461bcd60e51b815260206004820181905260248201527f5665746f546f6b656e20616464726573732063616e6e6f74206265207a65726f6044820152606401610524565b6305f5e10063ffffffff16846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610aab57600080fd5b505afa158015610abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae39190611eff565b14610b305760405162461bcd60e51b815260206004820152601760248201527f556e657870656374656420746f74616c20737570706c790000000000000000006044820152606401610524565b6040516370a0823160e01b81523360048201526305f5e100906001600160a01b038616906370a082319060240160206040518083038186803b158015610b7557600080fd5b505afa158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190611eff565b14610bfa5760405162461bcd60e51b815260206004820152601860248201527f556e6578706563746564206f776e65722062616c616e636500000000000000006044820152606401610524565b600660ff16846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3857600080fd5b505afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c709190611fc4565b60ff1614610cc05760405162461bcd60e51b815260206004820152601d60248201527f556e6578706563746564206e756d626572206f6620646563696d616c730000006044820152606401610524565b604780546001600160a01b038087166001600160a01b031992831617909255604880548684169083161790556000805492851692909116919091179055801561086f576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b600080610d5684610771565b91509150816040518060400160405280600f81526020016e11549493d497d393d517d193d55391608a1b81525090610da15760405162461bcd60e51b8152600401610524919061200d565b50600060018260ff16600a8110610dc857634e487b7160e01b600052603260045260246000fd5b60070201905080600601600d9054906101000a900460ff16156040518060400160405280600c81526020016b11549493d497d5915513d15160a21b81525090610e245760405162461bcd60e51b8152600401610524919061200d565b50610e2e816114aa565b156040518060400160405280600d81526020016c11549493d497d1561412549151609a1b81525090610e735760405162461bcd60e51b8152600401610524919061200d565b50600681015460408051808201909152601681527511549493d497d053149150511657d1561150d555115160521b602082015290600160601b900460ff1615610ecf5760405162461bcd60e51b8152600401610524919061200d565b50604754600182015460405163277166bf60e11b815233600482015264010000000090910463ffffffff166024820152600091610f70916001600160a01b0390911690634ee2cd7e9060440160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190611eff565b61177f565b905060008163ffffffff16116040518060400160405280601a81526020017f4552524f525f494e53554646494349454e545f42414c414e434500000000000081525090610fd05760405162461bcd60e51b8152600401610524919061200d565b5060013360009081526049602090815260408083208a845290915290205460ff16600281111561101057634e487b7160e01b600052602160045260246000fd5b141561105857808260060160048282829054906101000a900463ffffffff1661103991906120b7565b92506101000a81548163ffffffff021916908363ffffffff1602179055505b60023360009081526049602090815260408083208a845290915290205460ff16600281111561109757634e487b7160e01b600052602160045260246000fd5b14156110df57808260060160088282829054906101000a900463ffffffff166110c091906120b7565b92506101000a81548163ffffffff021916908363ffffffff1602179055505b6110ea8286836117da565b846110f65760026110f9565b60015b3360009081526049602090815260408083208a84529091529020805460ff1916600183600281111561113b57634e487b7160e01b600052602160045260246000fd5b021790555061114982611893565b156111a95781547f7f49fee12481e1a69afde062c724e5af30c2fea2dcc0184b173e4f1342f75508611195846006015463ffffffff600160401b82048116640100000000909204161190565b604051901515815260200160405180910390a25b505050505050565b60008060006111bf84610771565b91509150816111d2575060009392505050565b60018160ff16600a81106111f657634e487b7160e01b600052603260045260246000fd5b6007020160060160049054906101000a900463ffffffff1692505050919050565b60008061122383610771565b91509150816040518060400160405280600f81526020016e11549493d497d393d517d193d55391608a1b8152509061126e5760405162461bcd60e51b8152600401610524919061200d565b50600060018260ff16600a811061129557634e487b7160e01b600052603260045260246000fd5b60070201905080600601600d9054906101000a900460ff16156040518060400160405280600c81526020016b11549493d497d5915513d15160a21b815250906112f15760405162461bcd60e51b8152600401610524919061200d565b506112fb816114aa565b156040518060400160405280600d81526020016c11549493d497d1561412549151609a1b815250906113405760405162461bcd60e51b8152600401610524919061200d565b50600681015460408051808201909152601681527511549493d497d053149150511657d1561150d555115160521b602082015290600160601b900460ff161561139c5760405162461bcd60e51b8152600401610524919061200d565b506113a681611893565b6040518060400160405280601b81526020017f4552524f525f51554f52554d5f49535f4e4f545f524541434845440000000000815250906113fa5760405162461bcd60e51b8152600401610524919061200d565b50611404816118b3565b604051806060016040528060268152602001612159602691399061143b5760405162461bcd60e51b8152600401610524919061200d565b506004810154158015906114535750611453816118b3565b1561146457611464816002016118f9565b60068101805460ff60601b1916600160601b17905560405184907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90600090a250505050565b600181015460009042906114c8906203f4809063ffffffff16612060565b63ffffffff161092915050565b6000828152604a6020908152604091829020548251808401909352600f83526e22a92927a92fa1a7a62624a9a4a7a760891b9183019190915260ff161561152f5760405162461bcd60e51b8152600401610524919061200d565b506000828152604a6020526040808220805460ff1916600117905560475490516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561158c57600080fd5b505afa1580156115a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c49190611eff565b116040518060400160405280601a81526020017f4552524f525f494e53554646494349454e545f42414c414e4345000000000000815250906116195760405162461bcd60e51b8152600401610524919061200d565b506040810151156116e65760006001600160a01b031681602001516001600160a01b03161415604051806040016040528060128152602001714552524f525f5a45524f5f4144445245535360701b815250906116885760405162461bcd60e51b8152600401610524919061200d565b5080606001516116e65780516040805180820190915260128152714552524f525f5a45524f5f4144445245535360701b6020820152906001600160a01b03166116e45760405162461bcd60e51b8152600401610524919061200d565b505b6117506040518061012001604052808481526020016117044261177f565b63ffffffff1681526020016117184361177f565b63ffffffff16815260208101849052600060408201819052606082018190526080820181905260a0820181905260c090910152611946565b60405182907fc2c021f5d73c63c481d336fbbafec58f694fc45095f00b02d2deb8cca59afe0790600090a25050565b60408051808201909152601581527455494e5433325f4e554d4245525f544f4f5f42494760581b602082015260009063ffffffff8311156117d35760405162461bcd60e51b8152600401610524919061200d565b5090919050565b811561182657808360060160048282829054906101000a900463ffffffff166118039190612060565b92506101000a81548163ffffffff021916908363ffffffff160217905550611868565b808360060160088282829054906101000a900463ffffffff166118499190612060565b92506101000a81548163ffffffff021916908363ffffffff1602179055505b6118714361177f565b600693909301805463ffffffff191663ffffffff909416939093179092555050565b600061189e826118b3565b806118ad57506118ad82611af0565b92915050565b60006118c460026305f5e100612088565b6118cf906001612060565b63ffffffff168260060160049054906101000a900463ffffffff1663ffffffff1610159050919050565b600381015460ff1615611923576001810154600282015461082d916001600160a01b031690611b36565b80546001820154600283015461082d926001600160a01b03908116921690611c18565b600080611951611d9e565b91509150816040518060400160405280601381526020017211549493d497d45551555157d254d7d1955313606a1b815250906119a05760405162461bcd60e51b8152600401610524919061200d565b508260018260ff16600a81106119c657634e487b7160e01b600052603260045260246000fd5b82516007919091029190910190815560208083015160018301805460408087015163ffffffff94851667ffffffffffffffff199384161764010000000091861682021790935560608088015180516002890180546001600160a01b03199081166001600160a01b03938416179091559782015160038a018054909916911617909655908501516004870155939093015160058501805460ff191691151591909117905560808501516006909401805460a087015160c088015160e0890151610100909901519786169290961691909117908416909202919091176cffffffffff00000000000000001916600160401b939092169290920260ff60601b191617600160601b931515939093029290921760ff60681b1916600160681b91151591909102179055505050565b6000611b0160026305f5e100612088565b611b0c906001612060565b63ffffffff168260060160089054906101000a900463ffffffff1663ffffffff1610159050919050565b6040805180820190915260128152714552524f525f5a45524f5f4144445245535360701b60208201526001600160a01b038316611b865760405162461bcd60e51b8152600401610524919061200d565b50804710156040518060600160405280602381526020016121366023913990611bc25760405162461bcd60e51b8152600401610524919061200d565b506040516001600160a01b038316908290600081818185875af1925050503d8060008114611c0c576040519150601f19603f3d011682016040523d82523d6000602084013e611c11565b606091505b5050505050565b6040805180820190915260128152714552524f525f5a45524f5f4144445245535360701b60208201526001600160a01b038316611c685760405162461bcd60e51b8152600401610524919061200d565b506040516370a0823160e01b815230600482015281906001600160a01b038516906370a082319060240160206040518083038186803b158015611caa57600080fd5b505afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190611eff565b10156040518060600160405280602381526020016121366023913990611d1b5760405162461bcd60e51b8152600401610524919061200d565b5060405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015611d6657600080fd5b505af1158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086f9190611e7a565b60008060005b600a60ff82161015611e0057611de060018260ff16600a8110611dd757634e487b7160e01b600052603260045260246000fd5b60070201611e0b565b611dee576001939092509050565b80611df8816120dc565b915050611da4565b506000928392509050565b6001810154600090640100000000900463ffffffff1615801590611e355750611e3382611af0565b155b80156118ad57505060060154600160601b900460ff161590565b60008060408385031215611e61578182fd5b8235611e6c81612112565b946020939093013593505050565b600060208284031215611e8b578081fd5b8151611e9681612127565b9392505050565b600080600060608486031215611eb1578081fd5b8335611ebc81612112565b92506020840135611ecc81612112565b91506040840135611edc81612112565b809150509250925092565b600060208284031215611ef8578081fd5b5035919050565b600060208284031215611f10578081fd5b5051919050565b60008060008060808587031215611f2c578081fd5b843593506020850135611f3e81612112565b92506040850135611f4e81612112565b9396929550929360600135925050565b600080600060608486031215611f72578283fd5b833592506020840135611f8481612112565b929592945050506040919091013590565b60008060408385031215611fa7578182fd5b823591506020830135611fb981612127565b809150509250929050565b600060208284031215611fd5578081fd5b815160ff81168114611e96578182fd5b602081016003831061200757634e487b7160e01b600052602160045260246000fd5b91905290565b6000602080835283518082850152825b818110156120395785810183015185820160400152820161201d565b8181111561204a5783604083870101525b50601f01601f1916929092016040019392505050565b600063ffffffff80831681851680830382111561207f5761207f6120fc565b01949350505050565b600063ffffffff808416806120ab57634e487b7160e01b83526012600452602483fd5b92169190910492915050565b600063ffffffff838116908316818110156120d4576120d46120fc565b039392505050565b600060ff821660ff8114156120f3576120f36120fc565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461082d57600080fd5b801515811461082d57600080fdfe4552524f525f54524541535552595f494e53554646494349454e545f42414c414e43454552524f525f43414e4e4f545f455845435554455f52454a45435445445f50524f504f53414ca2646970667358221220e2c3a3f5dd4667d1987b97e11696765d854af8323b6a2c319385ec9488e75bc064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createProposal(uint256)": {
        "params": {
          "hash": "proposal hash"
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "token": "address of MiniMeToken"
        }
      },
      "veto(uint256)": {
        "params": {
          "hash": "proposal hash"
        }
      },
      "vote(uint256,bool)": {
        "params": {
          "hash": "The hash of the proposal",
          "support": "Yea or nay"
        }
      },
      "withdrawETH(uint256,address,uint256)": {
        "params": {
          "amount": "ETH amount",
          "hash": "proposal hash",
          "to": "where to send ETH"
        }
      },
      "withdrawToken(uint256,address,address,uint256)": {
        "params": {
          "amount": "how much token to send",
          "hash": "proposal hash",
          "to": "where to send token",
          "token": "ERC20-token contract address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createProposal(uint256)": {
        "notice": "Create a proposal without payment"
      },
      "execute(uint256)": {
        "notice": "Execute a proposal so it could be removed from the queue If the proposal's payment amount > 0 then a withdrawment from the treasury is made If there are not enough funds in the treasury then the transaction is reverted"
      },
      "find(uint256)": {
        "notice": "Find index of a proposal by hash that could be in any state: active, expired or finished"
      },
      "veto(uint256)": {
        "notice": "Veto the vote A user needs a Veto Token to run this method"
      },
      "vote(uint256,bool)": {
        "notice": "Cast a vote"
      },
      "withdrawETH(uint256,address,uint256)": {
        "notice": "Create a proposal to withdraw ETH"
      },
      "withdrawToken(uint256,address,address,uint256)": {
        "notice": "Create a proposal to withdraw a ERC20-token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3070,
        "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
        "label": "accessControl",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AccessControl)713"
      },
      {
        "astId": 6,
        "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3387,
        "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
        "label": "proposals",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Proposal)3202_storage)10_storage"
      },
      {
        "astId": 3730,
        "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
        "label": "votingToken",
        "offset": 0,
        "slot": "71",
        "type": "t_contract(IMiniMeToken)4460"
      },
      {
        "astId": 3733,
        "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
        "label": "vetoes",
        "offset": 0,
        "slot": "72",
        "type": "t_contract(VetoNFT)3683"
      },
      {
        "astId": 3740,
        "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
        "label": "voted",
        "offset": 0,
        "slot": "73",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_enum(VoteType)3727))"
      },
      {
        "astId": 3744,
        "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
        "label": "proposalExisted",
        "offset": 0,
        "slot": "74",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)3202_storage)10_storage": {
        "base": "t_struct(Proposal)3202_storage",
        "encoding": "inplace",
        "label": "struct Proposal[10]",
        "numberOfBytes": "2240"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AccessControl)713": {
        "encoding": "inplace",
        "label": "contract AccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(IMiniMeToken)4460": {
        "encoding": "inplace",
        "label": "contract IMiniMeToken",
        "numberOfBytes": "20"
      },
      "t_contract(VetoNFT)3683": {
        "encoding": "inplace",
        "label": "contract VetoNFT",
        "numberOfBytes": "20"
      },
      "t_enum(VoteType)3727": {
        "encoding": "inplace",
        "label": "enum VotingDAOV2.VoteType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_enum(VoteType)3727))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => enum VotingDAOV2.VoteType))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_enum(VoteType)3727)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(VoteType)3727)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum VotingDAOV2.VoteType)",
        "numberOfBytes": "32",
        "value": "t_enum(VoteType)3727"
      },
      "t_struct(Payment)3182_storage": {
        "encoding": "inplace",
        "label": "struct Payment",
        "members": [
          {
            "astId": 3175,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3177,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "destination",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3179,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3181,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "sendETH",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proposal)3202_storage": {
        "encoding": "inplace",
        "label": "struct Proposal",
        "members": [
          {
            "astId": 3184,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3186,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "createdTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 3188,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "createdBlockNumber",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 3191,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "payment",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Payment)3182_storage"
          },
          {
            "astId": 3193,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "updatedBlockNumber",
            "offset": 0,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 3195,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "yeas",
            "offset": 4,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 3197,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "nays",
            "offset": 8,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 3199,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "isExecuted",
            "offset": 12,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 3201,
            "contract": "contracts/VotingDAOV2.sol:VotingDAOV2",
            "label": "vetoed",
            "offset": 13,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}